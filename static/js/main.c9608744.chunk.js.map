{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Rectangle","start_time","end_time","machine","selected","operation_id","job_id","this","config","type","xref","yref","x0","unit_width","x1","y0","unit_height","y1","line","color","width","fillcolor","x","y","fill","mode","name","text","String","opacity","App","is_problem_set","state","problem","is_answer_set","answer","setup_data","layout","data","selected_job_id","enable_hover","splice","shapes","process_list","forEach","lst","idx","elem","elem_idx","machine_id","duration","operations","time","job","rect","push","toLayoutJson","threashold","prev_op","toDataJson","max_time","idx2","Math","max","xaxis","range","yaxis","machine_size","onDropProblem","files","reader","FileReader","onloadend","new_problem","JSON","parse","result","cloned_layout","Object","assign","cloned_data","hover","setState","readAsText","onDropAnswer","new_answer","onClickDebugCheckBox","debug","onClickHoverCheckBox","onChangeJobIDSelect","event","target","value","debugInfo","stringify","title","height","data_json","layout_json","responsive","className","onDrop","getRootProps","getInputProps","onChange","checked","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9608744.chunk.js","sourcesContent":["import React from 'react';\nimport Plot from 'react-plotly.js'\nimport Dropzone from 'react-dropzone'\n\nimport './App.css';\n\nclass Rectangle {\n  constructor(start_time, end_time, machine, selected, operation_id, job_id) {\n    this.start_time = start_time;\n    this.end_time = end_time;\n    this.machine = machine;\n    this.selected = selected;\n    this.operation_id = operation_id;\n    this.job_id = job_id;\n  }\n  toLayoutJson(config) {\n    return {\n      type: 'rect',\n      xref: 'x',\n      yref: 'y',\n      x0: config.unit_width * this.start_time,\n      x1: config.unit_width * this.end_time,\n      y0: config.unit_height * (this.machine - 1),\n      y1: config.unit_height * this.machine,\n      line: {\n        color: (this.selected ? 'rgb(0, 0, 0)' : 'rgb(55, 128, 191)'),\n        width: 1\n      },\n      fillcolor: (this.selected ? 'rgba(0, 0, 0, 0.6)' : 'rgba(55, 128, 191, 0.6)')\n    };\n  }\n  toDataJson(config) {\n\n    const x0 = config.unit_width * this.start_time;\n    const x1 = config.unit_width * this.end_time;\n    const y0 = config.unit_height * (this.machine - 1);\n    const y1 = config.unit_height * this.machine;\n\n    return {\n      x: [x0, x0, x1, x1, x0],\n      y: [y0, y1, y1, y0, y0],\n      fill: \"toself\",\n      mode: \"lines\",\n      name: \"\",\n      text: \"op_id = \" + String(this.operation_id) + \", job_id = \" + String(this.job_id),\n      opacity: 0\n    };\n  }\n}\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.config = {\n      title: \"Jobshop Scheduling Problem Visualizer\",\n      height: 1200,\n      width: 1600,\n      unit_height: 1,\n      unit_width: 1\n    };\n    this.state = {\n      problem: {},\n      answer: {},\n      data: this.data_json(),\n      layout: this.layout_json(),\n      debug: true,\n      selected_job_id: 0,\n      hover: false\n    };\n  }\n\n  is_problem_set = () => {\n    return \"operations\" in this.state.problem;\n  }\n  is_answer_set = () => {\n    return \"process_list\" in this.state.answer;\n  }\n\n  setup_data = (layout, data, problem, answer, selected_job_id, enable_hover) => {\n    data.splice(0);\n    layout.shapes.splice(0);\n    answer.process_list.forEach((lst, idx) => {\n      lst.forEach((elem, elem_idx) => {\n        const machine_id = idx + 1;\n        const duration = problem.operations[elem.operation_id].time;\n        const job_id = problem.operations[elem.operation_id].job;\n        const rect = new Rectangle(\n          elem.start_time,\n          elem.start_time + duration,\n          machine_id,\n          selected_job_id == job_id,\n          elem.operation_id,\n          job_id\n        );\n        layout.shapes.push(rect.toLayoutJson(this.config));\n        let threashold = 0;\n        if (enable_hover) {\n          if (elem_idx > 0) {\n            const prev_op = lst[elem_idx - 1];\n            const duration = problem.operations[prev_op.operation_id].time;\n            threashold = prev_op.start_time + duration;\n          }\n          // 前に隙間がある場合は登録\n          if (threashold < elem.start_time) {\n            data.push(rect.toDataJson(this.config));\n          }\n        }\n      });\n    });\n    let max_time = 0;\n    for (let idx in answer.process_list) {\n      for (let idx2 in answer.process_list[idx]) {\n        max_time = Math.max(max_time, answer.process_list[idx][idx2].start_time);\n      }\n    }\n    layout.xaxis.range = [0, this.config.unit_width * max_time * 1.1];\n    layout.yaxis.range = [0, this.config.unit_height * problem.machine_size * 1.1];\n  }\n\n  // この記法で関数を定義するのは、bind に関係がある(TODO: 調査)\n  onDropProblem = (files) => {\n    let reader = new FileReader()\n    reader.onloadend = () => {\n      const new_problem = JSON.parse(reader.result);\n      const cloned_layout = Object.assign(this.state.layout);\n      const cloned_data = Object.assign(this.state.data);\n      if (this.is_answer_set()) {\n        this.setup_data(cloned_layout, cloned_data, new_problem, this.state.answer, this.state.selected_job_id, this.state.hover);\n      }\n      this.setState({\n        ...this.state,\n        problem: new_problem,\n        layout: cloned_layout,\n        data: cloned_data\n      })\n    }\n    reader.readAsText(files[0]);\n  }\n  onDropAnswer = (files) => {\n    let reader = new FileReader()\n    reader.onloadend = () => {\n      const new_answer = JSON.parse(reader.result);\n      const cloned_layout = Object.assign(this.state.layout);\n      const cloned_data = Object.assign(this.state.data);\n      if (this.is_problem_set()) {\n        this.setup_data(cloned_layout, cloned_data, this.state.problem, new_answer, this.state.selected_job_id, this.state.hover);\n      }\n      this.setState({\n        ...this.state,\n        answer: new_answer,\n        layout: cloned_layout,\n        data: cloned_data\n      })\n    }\n    reader.readAsText(files[0]);\n  }\n\n  onClickDebugCheckBox = () => {\n    this.setState({\n      ...this.state,\n      debug: !this.state.debug\n    })\n  }\n\n  onClickHoverCheckBox = () => {\n    this.setup_data(this.state.layout, this.state.data, this.state.problem, this.state.answer, this.state.selected_job_id, this.state.hover);\n    this.setState({\n      ...this.state,\n      hover: !this.state.hover\n    })\n  }\n\n  onChangeJobIDSelect = (event) => {\n    const selected_job_id = event.target.value;\n\n    if (this.is_answer_set() && this.is_problem_set()) {\n      const cloned_layout = Object.assign(this.state.layout);\n      const cloned_data = Object.assign(this.state.data);\n      this.setup_data(cloned_layout, cloned_data, this.state.problem, this.state.answer, selected_job_id, this.state.hover);\n\n      this.setState({\n        ...this.state,\n        layout: cloned_layout,\n        data: cloned_data,\n        selected_job_id: selected_job_id\n      });\n    }\n  }\n\n  data_json() {\n    return [];\n  }\n\n  layout_json() {\n    const layout = {\n      title: this.config.title,\n      width: this.config.width,\n      height: this.config.height,\n      shapes: [new Rectangle(1, 2, 1).toLayoutJson(this.config)],\n      xaxis: {\n        range: [0, 10]\n      },\n      yaxis: {\n        range: [0, 10]\n      }\n    };\n    return layout;\n  }\n\n  debugInfo = () => {\n    if (this.state.debug) {\n      return (\n        <div>\n          <div>\n            problem = {JSON.stringify(this.state.problem)}\n          </div>\n          <div>\n            answer = {JSON.stringify(this.state.answer)}\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div> no debug information. </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Plot\n          data={this.state.data}\n          layout={this.state.layout}\n          config={{ responsive: true }}\n        />\n        <Dropzone className=\"dropzone\" onDrop={this.onDropProblem}>\n          {({ getRootProps, getInputProps }) => (\n            <section className=\"container\">\n              <div {...getRootProps({ className: 'dropzone' })}>\n                <input {...getInputProps()} />\n                <p>Drag & Drop problem json</p>\n                <p>{this.is_problem_set() ? \"problem is set.\" : \"\"}</p>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n        <Dropzone className=\"dropzone\" onDrop={this.onDropAnswer}>\n          {({ getRootProps, getInputProps }) => (\n            <section className=\"container\">\n              <div {...getRootProps({ className: 'dropzone' })}>\n                <input {...getInputProps()} />\n                <p>Drag & Drop answer json</p>\n                <p>{this.is_answer_set() ? \"answer is set.\" : \"\"}</p>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n        <label>job_id:</label>\n        <input type=\"text\" name=\"enlighten_job\" onChange={this.onChangeJobIDSelect} />\n        <form>\n          <input type=\"checkbox\" name=\"hover\" value=\"on\" checked={this.state.hover} onChange={this.onClickHoverCheckBox}></input>\n          <label> hover operation info </label>\n          <br></br>\n          <input type=\"checkbox\" name=\"debug\" value=\"on\" checked={this.state.debug} onChange={this.onClickDebugCheckBox}></input>\n          <label> debug mode </label>\n        </form>\n        {this.debugInfo()}\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}